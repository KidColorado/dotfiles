#!/usr/bin/env bash
# aws ecs update-service --cluster finder-stg --service finder-stg-cortex --profile cyndx --region us-east-1 --force-new-deployment

VERSION=1.0.0

task-count() {
aws ecs list-tasks --cluster "$APP"-"$ENV" --service "$APP"-"$ENV"-cortex  --region us-east-1 --query taskArns | jq length
}

task-watch() {
T=$(task-count)

if [ "$APP" == acme ]; then
  COUNT=4
else
  COUNT=3
fi

while true; do
  if [ "$T" -gt "$COUNT" ]; then
    echo "Task count is $T"
    T=$(task-count)
    sleep 3
  else
    echo "Cortex $APP update complete!"
    exit
  fi
done
}

app() {
  if [ "$1" == finder ] || [ "$1" == 1 ]; then
    APP=finder
  elif [ "$1" == acme ] || [ "$1" == 2 ]; then
    APP=acme
  else
    printf "\n%b Unkown app type. Please include a valid algo type [raiser or finder]\n\n" "$ERROR"
    exit
  fi
}

environment() {
  if [ "$1" == production ] || [ "$1" == 2  ]; then
    ENV=prd
  elif [ "$1" == staging ] || [ "$1" == 1 ]; then
    ENV=stg
  else
    printf "\n%b Unkown environment. Please include a valid environment [prod or stage]\n\n" "$ERROR"
    exit
  fi
}

name="Cortex Watch"

declare -a options=(
"--app value, -a value           app to run"
"--environment value, -e value   environment to run"
"--help, -h                      show help"
"--version, -v                   print the version"
)

description="A command line tool to watch AWS Elastic Container Service rolling updates"

usage="cortex-watch [options] [arguments...]"

instructions="   1) Tell the application which app and environment to use by\n\
  specifing --app and --environment.\n\
  e.g.\e[1;37;m cortex-watch -a finder -e prod \e[0m\n\
  App must be one of finder or acme.\n\
  Environment must be on of dev or staging.\n\n"

print_help() {
  printf "NAME:\n   %b - %b\n\n" "$name" "$description"
  printf "VERSION:\n   %s\n\n" $VERSION
  printf "USAGE:\n   %s\n\n" "$usage"
  printf "GLOBAL OPTIONS:\n"
  for ((i = 0; i < ${#options[@]}; i++)) do
    var=$(expr $i + 1)
    if [ $var == ${#options[@]} ]; then
      printf  "% 3s%s\n\n" "" "${options[$i]}"
    else
      printf  "% 3s%s\n" "" "${options[$i]}"
    fi
  done

  printf "INSTRUCTIONS:\n%b\n\n" "$instructions"
}

while [ "$1" != "" ]; do
  case $1 in
    -a | --app )            shift
      app $1
      ;;
    -e | --environment )    shift
      environment $1
      ;;
    -v | --version )        printf "%s version %s\n" "$name" $VERSION
      exit
      ;;
    -h | --help )           print_help
      exit
      ;;
    * )                     print_help
      exit 1
  esac
  shift
done

if [ -n "$APP" ] && [ -n "$ENV" ]; then
  task-watch
elif [ -z "$ALGO" ] && [ -z "$ENV" ]; then
  print_help
elif [ -n "$APP" ]; then
  printf "Environment missing. Use --help for help\n"
else
  printf "App type missing. Use --help for help\n"
fi

